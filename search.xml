<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>上瘾性行为,搞垮了多少成年人</title>
    <url>/2020/06/05/%E4%B8%8A%E7%98%BE%E6%80%A7%E8%A1%8C%E4%B8%BA,%E6%90%9E%E5%9E%AE%E4%BA%86%E5%A4%9A%E5%B0%91%E6%88%90%E5%B9%B4%E4%BA%BA/</url>
    <content><![CDATA[<p>前几天在后台看到有个读者留言，他很苦恼，一个刚刚毕业的男生，做着一份不是很忙的工作，每天都能准时5点半下班。</p>
<p>他知道下班后要提升一下自己，但是却抵挡不了王者荣耀的诱惑，一局接着一局，玩累了就玩斗地主放松一下，又接着鏖战，好像上瘾一般。</p>
<p>他很苦恼，想要戒掉。</p>
<p>这种“上瘾性”的行为许多人都有过，明知道不好，但还是一次又一次地深陷其中。</p>
<p>有研究就分析过，一个人在玩游戏和吸毒时，其大脑神经处理模式时一样的。</p>
<p>在这个时代，快乐容易，上瘾也容易。</p>
<p>一不小心就丧失自控力，变成快感的奴隶。</p>
<p><em>⒈</em>  </p>
<p>加拿大有位心理治疗师给“瘾”下过一个定义：</p>
<p>一种暂时让放松快乐，但长期伤害你，而你却无法放弃它的行为，就是行为上瘾。</p>
<p>怎么样才叫上瘾？</p>
<p>其实就是你对这件事“厌恶并渴望”。</p>
<p>就像我们玩手机一样。</p>
<p>我想起我手机里的屏幕管理记录，发现我在某视频app上一天花了3~4个小时。</p>
<p>最开始，我只是看一个感兴趣的视频，然后他又不断给我推荐类似的，手指一划，几个小时就过去了。然而，除了我最后看过的那个，我都不记得前面看过哪些。</p>
<p>生活被它们填满了，我剩下的只有空虚。</p>
<p>想摆脱又无力摆脱，想戒掉又困难重重。</p>
<p>实际上，我已经不能再体会到最初纯粹的快乐，失去了玩的最初意义。</p>
<p>像所有成瘾者一样，酒瘾者不是因为酒好喝，吸毒者也不是因为毒品美味。</p>
<p>很多时候，我们玩手机也不是因为手机好玩。</p>
<p>只是无聊或者空虚，或者说只是渴望那种被填满时间的感觉。</p>
<p>所谓上瘾，不过是一边厌恶着，但又强烈渴望着。</p>
<p><em>⒉</em></p>
<p>在《欲罢不能》这本书里面，提到了一个人为什么会对一件东西上瘾？</p>
<blockquote>
<p>1、可望不可即的诱人的目标</p>
<p>2、无法抵挡且无法预知的积极反馈</p>
<p>3、渐进式的进步和改善的感觉</p>
<p>4、随着时间推移越累越难的任务</p>
<p>5、需要解决但又暂未解决的紧张感</p>
<p>6、强大的社会联系</p>
</blockquote>
<p>在我们所成瘾的事情里，都满足了六个原则，它们很合理地解释了，我们为什么会沉迷于抖音、王者、甚至微信那些互联网产品。</p>
<p>刷短视频，会让你以为“下一条会更好笑”，因为它符合无法预知的积极反馈。</p>
<p>玩游戏，会让你在升级和变强的过程中，体会到那种“渐进式的进步”、“诱人目标”和“社会联系”。</p>
<p>刷社交网络，会让你在不断窥视并点赞别人生活的同时，让你有产生“强大的社会联系”的错觉。</p>
<p>互联网产品设计者洞悉人性弱点，他们用技术的逻辑精巧地掌控我们地多巴胺，收割快乐，囚禁时间。</p>
<p>硅谷有间叫“多巴胺实验室”的公司，做的事情正如其名。</p>
<p>创始人拉姆塞·布朗是一名神经生物学博士，他说过：</p>
<p>“这世界上肯定存在让人上瘾的代码。”</p>
<p>他所作的就是把神经科学理论应用到代码中，比如适时的点赞，虚拟的货币等等奖赏机制，然后根据大数据算法，让你一直能停留在适合你喜好的视频娱乐里面。</p>
<p>《欲罢不能》这本书里还有一句话：</p>
<p>“生产高科技产品的人，遵守毒品交易的头号规则：自己绝不能上瘾。”</p>
<p>巧合的是，乔布斯也曾公开说过，他不会给自己的孩子使用ipad。</p>
<p>互联网本应该是个中性词，他就给我们带来丰富的世界，也切割揉碎了我们的时间。</p>
<p>我们只需要轻轻一划就能收获快感，迎合趋乐避苦的本性。</p>
<p>我们上瘾不止因为互联网，还有我们的弱点。</p>
<p><em>⒊</em>  </p>
<p>世界遵循等价交换原则，凡是让你上瘾的东西，必定也让你痛苦。</p>
<p>像开头那位读者一样，许多人都有过被游戏捆绑的经历：</p>
<p>有款游戏叫《文明》，这个游戏有许多梗：“9点上线，8点下线”、“打完这回合就睡觉，咦，怎么天亮了？”</p>
<p>他被称为游戏界的毒品与解药，因为你想戒掉任何游戏，只需要入它的坑就能以毒攻毒。</p>
<p>但你碰到就会上瘾。而上瘾的后果，通宵达旦是小事，损害身体就不说了，更严重的是丢掉工作。</p>
<p>以前有个朋友，瘾来了甚至请假在家打游戏，别人上班，他开机，别人下班，他继续。一天肝十几个小时，最后得了干眼症和腱鞘炎。</p>
<p>而我们会在一次次上瘾行为中提高对快乐的阈值，当我们满足于唾手可得的碎片快乐，便越没耐心去追寻其他快乐。</p>
<p>没有自控力的人容易被娱乐产品玩弄鼓掌之中，投喂充满感官刺激的娱乐，一步步导引到成瘾的边缘，让他们付出时间、金钱、精力乃至人生。</p>
<p>现代人的不幸，很多是从行为上瘾开始。</p>
<p><em>⒋</em>  </p>
<p>明白了瘾是怎么回事，就知道上瘾是可以被控制。</p>
<blockquote>
<p>一：先忙起来，获取内啡肽</p>
</blockquote>
<p>多巴胺有个敌人是内啡肽，它给我们的快乐，更悠长也更痛快。</p>
<p>熬夜游戏会兴奋，是多巴胺在作祟。运动学习会充实，则是内啡肽。</p>
<p>因为人在大脑学习和记忆的区域就是内啡肽最多的区域。</p>
<p>当你对一件事成瘾时，尽量先忙起来，忙碌过后会很畅快。</p>
<blockquote>
<p>二：用微习惯欺骗自己</p>
</blockquote>
<p>众所周知，沉迷碎片快乐成瘾是坏习惯。</p>
<p>好习惯难养成，因为需要消耗精力，大脑会因此偷懒，阻断你的自律。但我们能用微习惯养成好习惯。</p>
<p>所谓微习惯，就是小到几乎不需要花费精力的习惯，比如把50个俯卧撑减少到5个俯卧撑，100个单词减少到5个单词，读1000字减少到读50个字……</p>
<p>你做完之后甚至还能做多一点，坚持下去久而久之就养成习惯了。</p>
<blockquote>
<p>三：找替代品</p>
</blockquote>
<p>摆脱一件东西的瘾，是找到另一件瘾。</p>
<p>当你对一件事情上瘾后，想一下有没有能给你同样需求的东西。</p>
<p>当你刷抖音的时候，是因为它能给你放松的感觉，那么看一部喜剧，或者散步是不是也能让你放松?</p>
<p>杀时间的方法很多，但是最好的是接受系统性的信息，而不是碎片化的。</p>
<blockquote>
<p>四：增加获取快乐的成本</p>
</blockquote>
<p>刷屏时代，我们获得快乐越来越便利，手指轻轻一划就有数不尽的娱乐视频，一部手机就能与朋友开黑。</p>
<p>增加获取快乐的成本，可以有效地让我们停止下来。</p>
<p>比如：</p>
<blockquote>
<p>1卸载相关的APP，设置不允许安装</p>
<p>2设置使用限制时长，到点就禁用app</p>
<p>3封存电脑，卖掉账号装备，熔掉符文，卖掉光盘……</p>
<p>4关掉朋友圈等各种入口</p>
</blockquote>
<p>尽其所能，制造阻力。</p>
<p>让你再想做这件事情时，产生一种“好麻烦哦”的感觉。</p>
<p>你就能成功戒掉一段时间了。</p>
<p>瘾，是极度渴望一件东西。一个人面上的渴望，是因为心里有了空缺。</p>
<p>在那浮华的快感背后，其实是我们未经审视的空虚。</p>
<p>正如阿城所说的：</p>
<p>每个时代都有它的绝境，我们今天的绝境是无聊。</p>
<p>点个<strong>“在看”</strong>，不要做快感的奴隶。</p>
]]></content>
  </entry>
  <entry>
    <title>日志</title>
    <url>/2020/06/04/%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p><img src="/images/%E6%97%A5%E5%BF%97%E7%BD%AE%E9%A1%B6.jpg" alt="alt"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用户在操作我们系统的过程中，针对一些重要的业务数据进行增删改查的时候，我们希望记录一下用户的操作行为，以便发生问题时能及时的找到依据，这种日志就是业务系统的操作日志。</p>
<p>本篇我们来探讨下常见操作日志的实现方案和可行性</p>
<h2 id="常见的操作日志类型"><a href="#常见的操作日志类型" class="headerlink" title="常见的操作日志类型"></a>常见的操作日志类型</h2><ul>
<li>用户登录日志</li>
<li>重要数据查询日志 （但电商可能不重要的数据也做埋点，比如在淘宝上你搜索什么商品，即使不买，一段时间内首页也会给你推荐类似的东西）</li>
<li>重要数据变更日志 （如密码变更，权限变更，数据修改等）</li>
<li>数据删除日志</li>
<li>……</li>
</ul>
<p>总结来说，就是重要的增删改查根据业务的需要来做操作日志的埋点。</p>
<h2 id="实现方案对比"><a href="#实现方案对比" class="headerlink" title="实现方案对比"></a>实现方案对比</h2><h3 id="基于AOP（切面）传统的实现方案"><a href="#基于AOP（切面）传统的实现方案" class="headerlink" title="基于AOP（切面）传统的实现方案"></a>基于AOP（切面）传统的实现方案</h3><ul>
<li>优点：实现思路简单；</li>
<li>缺点：增加数据库的负担，强依赖前端的传参，不方便拓展，不支持批量操作，不支持多表关联；</li>
</ul>
<h3 id="基于数据库Binlog"><a href="#基于数据库Binlog" class="headerlink" title="基于数据库Binlog"></a>基于数据库Binlog</h3><ul>
<li>优点：解除了数据新旧变化的耦合，支持批量操作，方便多表关联拓展，不依赖开发语言；</li>
<li>缺点：数据库表设计需要统一的约定；</li>
</ul>
<h2 id="方案实现细节"><a href="#方案实现细节" class="headerlink" title="方案实现细节"></a>方案实现细节</h2><h4 id="一、基于AOP切面-注解的传统方案"><a href="#一、基于AOP切面-注解的传统方案" class="headerlink" title="一、基于AOP切面+注解的传统方案"></a>一、基于AOP切面+注解的传统方案</h4><p>传统的做法就是切面+注解的方式，这种对代码的侵入性不强，通常记录ip、业务模块、操作账号、操作场景、操作来源等等，一般在注解+拦截器里这些值都拿得到，如下图所示：</p>
<p>这种常见的我们在通用方法都可以处理，但是在数据变更方面，一直没有较好的实现方式，比如数据在变更前是多少，变更后是多少。</p>
<p>以我们以前实现的一套方案来说，基于数据变更的记录方式不仅要和需求方约定好模板（上百个字段的不可能都做展示和记录），也要和前端做一些约定，比如在修改之前的值是多少，修改后的值是多少，如下代码客官请看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Valid</span><br><span class="line">@NotNull(message &#x3D; &quot;新值不能为空&quot;)</span><br><span class="line">@UpdateNewDataOperationLog</span><br><span class="line">private T newData;</span><br><span class="line"></span><br><span class="line">@Valid</span><br><span class="line">@NotNull(message &#x3D; &quot;旧值不能为空&quot;)</span><br><span class="line">@UpdateOldDataOperationLog</span><br><span class="line">private T oldData;</span><br></pre></td></tr></table></figure>

<h3 id="存在的问题："><a href="#存在的问题：" class="headerlink" title="存在的问题："></a>存在的问题：</h3><ul>
<li>1.旧值如果不多查询一次数据库则需要依赖前端把旧值封装到oldData对象中，很有可能已经不是修改前的值；</li>
<li>2.无法处理批量的List数据；</li>
<li>3.不支持多表操作；</li>
</ul>
<p>再以一个场景为例，再删除之前需要记录删除前的值，是不是还得再查一次~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@PostMapping(&quot;&#x2F;delete&quot;)</span><br><span class="line">@ApiOperation(value &#x3D; &quot;删除用户信息&quot;, notes &#x3D; &quot;删除用户信息&quot;)</span><br><span class="line">@DeleteOperationLog(system &#x3D; SystemNameNewEnum.SYS_JMS_LMDM, module &#x3D; ModuleNameNewEnum.LMDM_AUTH, table &#x3D; LogBaseTableNameEnum.TABLE_USER, methodName &#x3D; &quot;detail&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="二、基于数据库Binlog-方案"><a href="#二、基于数据库Binlog-方案" class="headerlink" title="二、基于数据库Binlog 方案"></a>二、基于数据库Binlog 方案</h4><p>系统架构图如下：</p>
<p><img src="/images/Binlog%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="alt"></p>
<p><strong>「主要分为3块：」</strong></p>
<ul>
<li><p>1：业务应用 生成每次操作的traceid，并更新到操作的业务表中，发送1条业务消息，包含当前操作的操作人相关的信息；</p>
</li>
<li><p>2：日志收集应用 对业务日志和转换后的binlog日志做整合，提供对外的日志查询搜索API；</p>
</li>
<li><p>3：日志处理应用</p>
</li>
<li><ul>
<li>利用canal采集和解析业务库的binlog日志并投递到kafka中，解析后的记录中记录了当前操作的操作类型，如属于删除、修改、新增,和新旧值的记录，格式如下：</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;data&quot;:[&#123;&quot;id&quot;:&quot;122158992930664499&quot;,&quot;bill_type&quot;:&quot;1&quot;,&quot;create_time&quot;:&quot;2020-04-2609:15:13&quot;,&quot;update_time&quot;:&quot;2020-04-2613:45:46&quot;,&quot;version&quot;:&quot;2&quot;,&quot;trace_id&quot;:&quot;exclude-f04ff706673d4e98a757396efb711173&quot;&#125;],</span><br><span class="line">&quot;database&quot;:&quot;yl_spmibill_8&quot;,</span><br><span class="line">&quot;es&quot;:1587879945200,</span><br><span class="line">&quot;id&quot;:17161259,</span><br><span class="line">&quot;isDdl&quot;:false,</span><br><span class="line">&quot;mysqlType&quot;:&#123;&quot;id&quot;:&quot;bigint(20)&quot;,</span><br><span class="line">&quot;bill_type&quot;:&quot;tinyint(2)&quot;,</span><br><span class="line">&quot;create_time&quot;:&quot;timestamp&quot;,</span><br><span class="line">&quot;update_time&quot;:&quot;timestamp&quot;,</span><br><span class="line">&quot;version&quot;:&quot;int(11)&quot;,</span><br><span class="line">&quot;trace_id&quot;:&quot;varchar(50)&quot;&#125;,</span><br><span class="line">&quot;old&quot;:[&#123;&quot;update_time&quot;:&quot;2020-04-2613:45:45&quot;,</span><br><span class="line">&quot;version&quot;:&quot;1&quot;,</span><br><span class="line">&quot;trace_id&quot;:&quot;exclude-36aef98585db4e7a98f9694c8ef28b8c&quot;&#125;],</span><br><span class="line">&quot;pkNames&quot;:[&quot;id&quot;],&quot;sql&quot;:&quot;&quot;,</span><br><span class="line">&quot;sqlType&quot;:&#123;&quot;id&quot;:-5,&quot;bill_type&quot;:-6,&quot;create_time&quot;:93,&quot;update_time&quot;:93,&quot;version&quot;:4,&quot;trace_id&quot;:12&#125;,</span><br><span class="line">&quot;table&quot;:&quot;xxx_transfer_bill_117&quot;,</span><br><span class="line">&quot;ts&quot;:1587879945698,&quot;type&quot;:&quot;UPDATE&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>处理完binlon日志转换后的操作日志，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;id&quot;:&quot;120716921250250776&quot;,</span><br><span class="line">&quot;relevanceInfo&quot;:&quot;XX0000097413282,&quot;,</span><br><span class="line">&quot;remark&quot;:&quot;签收财务网点编码由【】改为【380000】，</span><br><span class="line">签收网点名称由【】改为【泉州南安网点】，签收网点code由【】改为【2534104】，运单状态code由【204】改为【205】，签收财务网点名称由【】改为【福建代理区】，签收网点id由【0】改为【461】，签收标识,1是，0否由【0】改为【1】，签收时间由【null】改为【2020-04-24 21:09:47】，签收财务网点id由【0】改为【400】，&quot;,</span><br><span class="line">&quot;traceId&quot;:&quot;120716921250250775&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="库表设计"><a href="#库表设计" class="headerlink" title="库表设计"></a>库表设计</h3><ul>
<li>1：所有业务系统表需要添加trace_id字段，每次操作生成一个随机字符串并保存到业务表中；</li>
<li>2：日志收集应用库表设计</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;table_config&#96; (</span><br><span class="line">  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;id&#39;,</span><br><span class="line">  &#96;database_name&#96; varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#39;数据库名&#39;,</span><br><span class="line">  &#96;table_name&#96; varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#39; 数据库表名&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;unq_data_name_table_name&#96; (&#96;database_name&#96;,&#96;table_name&#96;) USING BTREE COMMENT &#39;数据库名表名联合索引&#39;</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;35 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci COMMENT&#x3D;&#39;数据库配置表&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;table_field_config&#96; (</span><br><span class="line">  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;table_config_id&#96; bigint(20) DEFAULT NULL,</span><br><span class="line">  &#96;field&#96; varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#39;字段 数据库&#39;,</span><br><span class="line">  &#96;field_name&#96; varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#39;字段 中文名称&#39;,</span><br><span class="line">  &#96;enum_flag&#96; tinyint(2) DEFAULT NULL COMMENT &#39;是否枚举字段(1:是,0:否)&#39;,</span><br><span class="line">  &#96;relevance_flag&#96; tinyint(2) DEFAULT NULL COMMENT &#39;是否是关联字段(1:是,0否)&#39;,</span><br><span class="line">  &#96;sort&#96; int(11) DEFAULT NULL COMMENT &#39;排序&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;idx_table_config_id&#96; (&#96;table_config_id&#96;) USING BTREE COMMENT &#39;表ID索引&#39;</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2431 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci COMMENT&#x3D;&#39;数据库字段配置表&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;table_field_value&#96; (</span><br><span class="line">  &#96;id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;field_config_id&#96; bigint(20) DEFAULT NULL,</span><br><span class="line">  &#96;field_key&#96; varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#39; 枚举&#39;,</span><br><span class="line">  &#96;filed_value&#96; varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT &#39;枚举名称&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  KEY &#96;ids_field_config_id&#96; (&#96;field_config_id&#96;) USING BTREE</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci COMMENT&#x3D;&#39;数据字典配置表&#39;;</span><br></pre></td></tr></table></figure>

<p><img src="/images/binlog%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1%E8%A7%86%E5%9B%BE.jpg" alt="alt"></p>
<h2 id="基于binlog实现方案未来规划"><a href="#基于binlog实现方案未来规划" class="headerlink" title="基于binlog实现方案未来规划"></a>基于binlog实现方案未来规划</h2><ol>
<li>优化发送业务消息的实现，使用切面拦截减少对业务代码的侵入；</li>
<li>目前暂时不支持对多表关联操作日志记录，需要拓展；</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文以操作日志为题材讨论了操作日志的实现方案和可行性，并且都已经在功能上进行实现，其中使用aop方案也是大部分中小企业的首选实现方案，但是在一些金融领域以及erp相关系统，对操作日志记录明细要求极高，常见技术方案很难满足，即使能够满足也会带来一些代码强侵入以及性能问题。</p>
<p>所以我们又讨论了基于binlog实现的方案，该方案虽然比对aop来说增强了技术的复杂性，但是对于有一定技术积累的团队来说不算什么难事，并且该方案我们都实现了上线，并且解决了代码层面上的侵入，属于跨语言级别的，相信对读者还是有一定的启发。</p>
]]></content>
  </entry>
  <entry>
    <title>所有的遇见，都是一种偿还</title>
    <url>/2020/05/24/%E6%89%80%E6%9C%89%E7%9A%84%E9%81%87%E8%A7%81%EF%BC%8C%E9%83%BD%E6%98%AF%E4%B8%80%E7%A7%8D%E5%81%BF%E8%BF%98/</url>
    <content><![CDATA[<p>《所有的遇见，都是一种偿还》</p>
<p>佛说：“前世五百次的回眸，才换来今生的擦肩而过。”</p>
<p>每一个相遇都是久别重逢，因为我们的缘分是生世轮回的，此刻你认识每一个人，都是前世的旧友，我们见过，只是我们都过了桥，喝了孟婆汤，就把彼此忘了。</p>
<p>今生再见，都是为了还上辈子欠下的债，缘深缘浅，在于欠债多少，欠得多，相伴的时间多一点，欠得少，相处的时间少一点。</p>
<p>正应了那句“若无相欠，怎会相见。”</p>
<p>-01-</p>
<p>小说《夏至未至》里曾提过一个天使的说法：</p>
<p> 每一个人都有一个一直守护着他（她）的天使，这个天使如果觉得你的生活太过悲哀，你的心情太过难过，那么他就会化身成为你身边的某一个人。</p>
<p>也许是你的朋友，也许是你的恋人，也许是你的父母，也许是你仅仅见过一面的陌生人，这些人安静地出现在你的生命里，陪你度过一小段快乐的时光，然后他再不动声色的离开。</p>
<p>相遇这件事，到底是上辈子的债为了还才遇见，还是因为守护天使的庇佑化身而来，我不得而知。</p>
<p> 我只知道，差一点就一辈子的人，却再也没出现；</p>
<p> 我只知道，当时相处时，我们畅快的笑，痛快的哭，我们曾那样真切的规划过未来，却终是走散；</p>
<p>我只知道，有些人助我帮我，改变了我一生的轨迹，有些人待我似亲人，爱我如生命，他们就在那里，却再不肯见我。</p>
<p> 世界上有70亿人口，我们这一生会遇到大约2920万人，在这茫茫人海里，两个人相爱的概率是0.00049。</p>
<p>可是我再怎样庆幸着这难得的相遇，再怎样努力的经营，我甚至傻傻的恳求和挽留，却如何也掌控不了我们的未来。</p>
<p>- 02 -</p>
<p>这是流行离开的世界，但我们都不擅长告别 </p>
<p>若说所有的相遇都是久别重逢，前世都欠下了，今生为何还是要走？</p>
<p>知乎上有这样一个话题《如果世间所有的相遇都是久别重逢，那离别是为了什么？》</p>
<p>有个回答很喜欢：</p>
<p>“遇见，是两个人的事；离开，却是一个人的决定。遇见是一个开始，离开却是为了遇见下一个离开。这是一个流行离开的世界，但是我们都不擅长告别。”</p>
<p>生的那一刻就是在一步步走向终结，遇见也是，相识相处的每分每秒都是在走向分别。</p>
<p>只是我们从来就没想过分别到来的会如此的快，我们还未来得及演习。</p>
<p>很喜欢的一部电影《一代宗师》，宫二这一世，未嫁娶，不传艺，争着一口气，直到最后。</p>
<p>她对叶问有情，但他们只有情缘，没有结果，这一世的缘，是必定要绝的。</p>
<p>记得里面有个画面，叶先生说：“你我之间，本没有恩怨。有的，只是一段缘分。”</p>
<p>她黯然失神：“是的，我们之间，是一段缘分。或许今世的缘分，可以追溯到前世，寄望于后世。今世的愿绝了，死生契阔，我们每一世，都有愿成说。”</p>
<p>是隐忍还是看开，总之看到她说的这句话时，内心相当的无奈又无力，明明那样相爱相惜，但还是主动选择了分开。</p>
<p>电影里有句话这样说:“无生无死，才是最好的未来。”</p>
<p>它说：“人生若无憾，那该多无趣啊。”</p>
<p>当真是通透，还是逼自己断舍离，这样的决然和平静的一句话，我反复咀嚼了无数遍，聚散有时，就这样吧。</p>
<p>- 03 -</p>
<p>后会无期，天总会晴</p>
<p>《本杰明·巴顿奇事》里说：“我们注定要失去我们所爱的人，要不然我们怎么会知道他们对我们多么的重要。”</p>
<p>《玻璃之城》里说：“我们分开的日子，你不在我身边，我才最爱你。”</p>
<p>你走后，我学会了自强，你不在后，我才懂得了珍惜，才真正的思考了自己的未来，明白了什么是自己想要和真心想做的，更学会了如何去爱。</p>
<p>谢谢你的离开，我开始警醒，开始认真的活，谢谢你的决绝让我变成了更好的人。</p>
<p>电影《后会无期》的最后有这么一段话：“跟人道别的时候，还是要用力一点，因为你多说一句，很可能是最后一句，多看一眼，指不定就是最后一眼……” </p>
<p>很多时候，一转身，就是一辈子，所以相见时，要心存感激，像第一次，离别时，要好好告别，像最后一次。</p>
<p>因为所有的遇见，都是一种偿还，你永远不知道，哪一天他（她）的使命得以终结，明天你们再不会见。</p>
]]></content>
  </entry>
  <entry>
    <title>微服务核心架构梳理</title>
    <url>/2020/06/03/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<h1 id="Hello，Microservices"><a href="#Hello，Microservices" class="headerlink" title="Hello，Microservices"></a>Hello，Microservices</h1><p>在公司学习了接近一个月。</p>
<p>一个月内，从0开始开始接触分布式微服务架构，给了我不小的收获。今天，我来从头到尾梳理一下，有关微服务架构的核心内容（全是干货）。</p>
<p>下文，你将看到业界主流微服务框架的核心原理，包括服务发现、网关、配置中心、监控等组件，功能和架构原理的简单介绍。感谢阅读！😋</p>
<p>想要解锁更多新姿势？请访问<a href="https://mayongjian.top">我的博客</a>。😏</p>
<h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务?"></a>什么是微服务?</h2><p>微服务Microservices之父，马丁.福勒，对微服务大概的概述如下：</p>
<blockquote>
<p>就目前而言，对于微服务业界并没有一个统一的、标准的定义（While there is no precise definition of this architectural style ) 。但通在其常而言，微服务架构是一种架构模式或者说是一种架构风格，它提倡将单一应用程序划分成一组小的服务，每个服务运行独立的自己的进程中，服务之间互相协调、互相配合，为用户提供最终价值。服务之间采用轻量级的通信机制互相沟通（通常是基于 HTTP 的 RESTful API ) 。每个服务都围绕着具体业务进行构建，并且能够被独立地部署到生产环境、类生产环境等。另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务。可以使用不同的语言来编写服务，也可以使用不同的数据存储。</p>
</blockquote>
<p>根据马丁·福勒的描述，我总结了以下几点：</p>
<p><img src="/images/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1.jpg" alt="alt"></p>
<h3 id="①小服务"><a href="#①小服务" class="headerlink" title="①小服务"></a>①小服务</h3><blockquote>
<p>小服务，没有特定的标准或者规范，但他在总体规范上一定是小的。</p>
</blockquote>
<h3 id="②进程独立"><a href="#②进程独立" class="headerlink" title="②进程独立"></a>②进程独立</h3><blockquote>
<p>每一组服务都是独立运行的，可能我这个服务运行在 Tomcat 容器，而另一个服务运行在 Jetty 上。可以通过进程方式，不断的横向扩展整个服务。</p>
</blockquote>
<h3 id="③通信"><a href="#③通信" class="headerlink" title="③通信"></a>③通信</h3><blockquote>
<p>过去的协议都是很重的，就像 ESB，就像 SOAP，轻通信，这意味着相比过去更智能更轻量的服务相互调用，就所谓 smart endpoints and dumb pipes。</p>
<p>这些 Endpoint 都是解耦的，完成一个业务通信调用串起这些 Micro Service 就像是 Linux 系统中通过管道串起一系列命令业务。</p>
<p>过去的业务，我们通常会考虑各种各样的依赖关系，考虑系统耦合带来的问题。微服务，可以让开发者更专注于业务的逻辑开发。</p>
</blockquote>
<h3 id="④部署"><a href="#④部署" class="headerlink" title="④部署"></a>④部署</h3><blockquote>
<p>不止业务要独立，部署也要独立。不过这也意味着，传统的开发流程会出现一定程度的改变，开发的适合也要有一定的运维职责。</p>
</blockquote>
<h3 id="⑤管理"><a href="#⑤管理" class="headerlink" title="⑤管理"></a>⑤管理</h3><blockquote>
<p>传统的企业级 SOA 服务往往很大，不易于管理，耦合性高，团队开发成本比较大。</p>
<p>微服务，可以让团队各思其政的选择技术实现，不同的 Service 可以根据各自的需要选择不同的技术栈来实现其业务逻辑。</p>
</blockquote>
<h2 id="微服务的利与弊"><a href="#微服务的利与弊" class="headerlink" title="微服务的利与弊"></a>微服务的利与弊</h2><p>为什么用微服务呢？因为好玩？不是的。下面是我从网络上找到说的比较全的<strong>优点</strong>：</p>
<blockquote>
<ul>
<li>每个服务足够内聚，足够小，代码容易理解这样能聚焦一个指定的业务功能或业务需求。</li>
<li>开发简单、开发效率提高，一个服务可能就是专一的只干一件事。</li>
<li>微服务能够被小团队单独开发，这个小团队是 2 到 5 人的开发人员组成。</li>
<li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的。</li>
<li>微服务能使用不同的语言开发。</li>
<li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如 Jenkins，Hudson，bamboo。</li>
<li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果。无需通过合作才能体现价值。微服务允许你利用融合最新技术。</li>
<li>微服务只是业务逻辑的代码，不会和 HTML，CSS 或其他界面组件混合。</li>
<li>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一数据库。</li>
</ul>
</blockquote>
<p>总的来说，微服务的优势，就是在于：面对大的系统，可以有效的减少复杂程度，使服务架构的逻辑更清晰明了。</p>
<p>但是这样也会带来很多<strong>问题</strong> ：</p>
<blockquote>
<p>就譬如分布式环境下的数据一致性，测试的复杂性，运维的复杂性。</p>
</blockquote>
<h2 id="什么组织适合使用微服务？"><a href="#什么组织适合使用微服务？" class="headerlink" title="什么组织适合使用微服务？"></a>什么组织适合使用微服务？</h2><p>微服务带了种种优点，种种弊端，那么什么组织适合使用微服务？</p>
<h3 id="①墨菲定律（设计系统）和康威定律（系统划分）"><a href="#①墨菲定律（设计系统）和康威定律（系统划分）" class="headerlink" title="①墨菲定律（设计系统）和康威定律（系统划分）"></a>①墨菲定律（设计系统）和康威定律（系统划分）</h3><p>康威定律，是一个五十多年前就被提出来的微服务概念。在康威的这篇文章中，最有名的一句话就是：</p>
<blockquote>
<p>Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations. </p>
<p>​                                                            <em>-Melvin Conway(1967)</em></p>
</blockquote>
<p>中文直译大概的意思就是：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。</p>
<p>看看下面的图片，再想想 Apple 的产品、微软的产品设计，就能形象生动的理解这句话。</p>
<p><img src="/images/%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B%E8%8D%89%E5%9B%BE.jpg" alt="alt"></p>
<p>感兴趣的各位可以研究一下！</p>
<h3 id="②架构演化"><a href="#②架构演化" class="headerlink" title="②架构演化"></a>②架构演化</h3><p>架构是不断演化出来的，微服务也是这样，当从各大科技公司，规模大到一定程度，完全需要演化成更进一步管理的技术架构体系。</p>
<p><img src="/images/%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8C%96%E4%BD%93%E7%B3%BB%E8%8D%89%E5%9B%BE.jpg" alt="alt"></p>
<p>传统的团队，都是面向过程化的，产品想完了去找策划，策划完了找开发，接着顺着一步一步找。</p>
<p>我们做技术都是为了产品的，一旦过程出来了什么问题，回溯寻找问题会非常耗时。</p>
<p><img src="/images/%E8%B7%A8%E8%81%8C%E8%83%BD%E5%9B%A2%E9%98%9F%E8%8D%89%E5%9B%BE.jpg" alt="alt"></p>
<p>使用了微服务架构体系，团队组织方式需要转变成跨职能团队，即每个团队都有产品专家，策划专家，开发专家，运维专家，他们使用 API 方式发布他们的功能，而平台使用他们的功能发布产品。</p>
<p><img src="/images/%E8%B7%A8%E8%81%8C%E8%83%BD%E5%9B%A2%E9%98%9F%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="alt"></p>
<p><img src="/images/DevOps%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="alt"></p>
<h1 id="微服务技术架构体系"><a href="#微服务技术架构体系" class="headerlink" title="微服务技术架构体系"></a>微服务技术架构体系</h1><p>下面我分享一下大部分公司都使用的微服务技术架构体系：</p>
<p><img src="/images/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%BD%93%E7%B3%BB.jpg" alt="alt"></p>
<h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><p>主流的服务发现，分为三种：</p>
<p><img src="/images/%E7%AC%AC%E4%B8%80%E7%A7%8D.jpg" alt="alt"></p>
<blockquote>
<p>①第一种，开发人员开发了程序以后，会找运维配一个域名，服务的话通过 DNS 就能找到我们对应的服务。</p>
<p>缺点是，由于服务没有负载均衡功能，对负载均衡服务，可能会有相当大的性能问题。</p>
</blockquote>
<p><img src="/images/%E7%AC%AC%E4%BA%8C%E7%A7%8D.jpg" alt="alt"></p>
<blockquote>
<p>②第二种，是目前普遍的做法。可以参考 Zuul 网关，每一个服务都通过服务端内置的功能注册到注册中心，服务消费者不断轮询注册中心发现对应的服务，使用内置负载均衡调用服务。</p>
<p>缺点是：对多语言环境不是很好，你需要单独给消费者的客户端开发服务发现和负载均衡功能。当然了，这个方法通常都是用在 Spring Cloud 上的。</p>
</blockquote>
<p><img src="/images/%E7%AC%AC%E4%B8%89%E7%A7%8D.jpg" alt="alt"></p>
<blockquote>
<p>③第三种，是将客户端和负载均衡放在同一个主机，而不是同一个进程内。</p>
<p>这种方法相对第一种第二种方法来说，改善了他们的缺点，但是会极大增加运维成本。</p>
</blockquote>
<h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><h3 id="微服务的网关是什么？"><a href="#微服务的网关是什么？" class="headerlink" title="微服务的网关是什么？"></a>微服务的网关是什么？</h3><p>我们可以联系生活实际想一下。每一个大的公司，都会有一偏属于自己的建筑区，而这建筑区内，都有不少的门卫。如果有外来人员进入公司，会先和门卫打好招呼，才能进去。</p>
<p>将生活实际联系到微服务上，就不难理解网关的意思了：</p>
<p><img src="/images/%E7%BD%91%E5%85%B3%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8.jpg" alt="alt"></p>
<h3 id="网关的作用："><a href="#网关的作用：" class="headerlink" title="网关的作用："></a>网关的作用：</h3><blockquote>
<ul>
<li>反向路由：很多时候，公司不想让外部人员看到我们公司的内部，就需要网关来进行反向路由。即将外部请求转换成内部具体服务条用</li>
<li>安全认证：网络中会有很多恶意访问，譬如爬虫，譬如黑客攻击，网关维护安全功能。</li>
<li>限流熔断：参考我学好分布式zookepper的博客，当请求很多服务不堪重负，会让我们的服务自动关闭，导致不能用服务。限流熔断可以有效的避免这类问题。</li>
<li>日志监控：所有的外面的请求都会经过网关，这样我们就可以使用网关来记录日志信息</li>
<li>灰度发布，蓝绿部署。是指能够平滑过渡的一种发布方式。在其上可以进行A/B testing，即让一部分用户继续用产品特性A，一部分用户开始用产品特性B，如果用户对B没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到B上面来。</li>
</ul>
</blockquote>
<h3 id="开源网关-Zuul-架构："><a href="#开源网关-Zuul-架构：" class="headerlink" title="开源网关 Zuul 架构："></a>开源网关 Zuul 架构：</h3><p><img src="/images/%E7%BD%91%E5%85%B3Zuul%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="alt"></p>
<p><code>Zuul</code> 网关核心其实是一个 <code>Servlet</code>，所有请求都会经过 <code>Zuul Servlet</code> 传到 <code>ZuulFilter Runner</code>，然后分发到三种过滤器。</p>
<p>先说说架构图左半部分，分别是使用 <code>Groovy</code> 实现的前置路由过滤器，路由过滤器，后置路由过滤器。</p>
<p>一般请求都会先经过<code>前置路由过滤器</code>处理，一般的自定义 Java 封装逻辑也会在这里实现。</p>
<p><code>路由过滤器</code>，实现的是找到对应的微服务进行调用。调用完了，响应回来，会经过<code>后置路由过滤器</code>，通过后置路由过滤器我们可以封装日志审计的处理。</p>
<p>可以说 Zuul 网关最大的特色就是它的三层过滤器。架构图右半部分，是 Zuul 网关设计的自定义过滤器加载机制。</p>
<p>网关内部会有生产者消费者模型，自动的将过滤器脚本发布到 Zuul 网关读取加载运行。</p>
<h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><p>以前，开发人员把配置文件放在开发文件里面，这样会有很多隐患。譬如，配置规范不同，无法追溯配置人员。</p>
<p>一旦需要大规模改动配置，改动时间会很长，无法追溯配置人员，从而影响整个产品，后果是我们承担不起的。</p>
<p>因此就有配置中心这个喽！</p>
<p>现在的开源中心有百度配置中心 Disconf，Spring Cloud Config，Apollo。</p>
<h3 id="携程开源的阿波罗（Apollo）："><a href="#携程开源的阿波罗（Apollo）：" class="headerlink" title="携程开源的阿波罗（Apollo）："></a>携程开源的阿波罗（Apollo）：</h3><p>开源地址👉：<a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">github.com/ctripcorp/a…</a></p>
<p><img src="/images/Apollo.jpg" alt="alt"></p>
<p>Apollo 的配置中心规模比较大，本地应用会有响应的配置中心客户端，可以定时同步配置中心里的配置。如果配置中心怠机，会使用缓存来进行配置。</p>
<h2 id="通讯方式"><a href="#通讯方式" class="headerlink" title="通讯方式"></a>通讯方式</h2><p>关于通讯方式，一般市面也就是两种远程调用方式，我整理了一个表格：</p>
<p><img src="/images/%E9%80%9A%E8%AE%AF%E6%96%B9%E5%BC%8F.jpg" alt="alt"></p>
<h2 id="监控预警"><a href="#监控预警" class="headerlink" title="监控预警"></a>监控预警</h2><p>监控预警对于微服务很重要，一个可靠的监控预警体系对微服务运行至关重要。</p>
<p>一般监控分为如下层次：</p>
<p><img src="/images/%E7%9B%91%E6%8E%A7.jpg" alt="alt"></p>
<p>从基础设施到用户端，层层有监控，全方位，多角度，每一个层面都很重要。</p>
<p>总体来说，微服务可分为 5 个监控点：</p>
<blockquote>
<ul>
<li><strong>日志监控</strong></li>
<li><strong>Metrics 监控</strong></li>
<li><strong>健康检查</strong></li>
<li><strong>调用链检查</strong></li>
<li><strong>告警系统</strong></li>
</ul>
</blockquote>
<h3 id="①监控架构"><a href="#①监控架构" class="headerlink" title="①监控架构"></a>①监控架构</h3><p>下面的图是大部分公司的一种监控架构图。每一个服务都有一个 Agent，Agent 收集到关键信息，会传到一些 MQ 中，为了解耦。</p>
<p>同时将日志传入 ELK，将 Metrics 传入 InfluxDB 时间序列库。而像 Nagios，可以定期向 Agent 发起信息检查微服务。</p>
<p><img src="/images/%E7%9B%91%E6%8E%A7%E6%9E%B6%E6%9E%84.jpg" alt="alt"></p>
<h3 id="②调用链监控-APM"><a href="#②调用链监控-APM" class="headerlink" title="②调用链监控 APM"></a>②调用链监控 APM</h3><p>很多公司都有调用链监控，就譬如阿里有鹰眼监控，点评的 Cat，大部分调用链监控（没错，我指的 Zipkin）架构是这样的：</p>
<p><img src="/images/%E8%B0%83%E7%94%A8%E9%93%BE%E7%9B%91%E6%8E%A7APM.jpg" alt="alt"></p>
<p>当请求进入 Web 容器的时候，会经过创建 Tracer，连接 Spans（模拟潜在的分布式工作的延迟，该模块还包含在系统网络间传递跟踪上下文信息的工具包，如通过 HTTP Headers）。</p>
<p>Spans 有一个上下文，其中包含 Tracer 标识符，将其放在表示分布式操作的树的正确位置。</p>
<p>当我们把图中的各种 Span 放到后端的时候，我们的服务调用链会动态的生成调用链。</p>
<p>下面是一些市场上用的比较多的调用链监控：</p>
<p><strong>1、Pinpoint</strong>  github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">GitHub - naver/pinpoint: Pinpoint is an open source APM (Application Performance Management) tool for large-scale distributed systems written in Java.</a>对java领域的性能分析有兴趣的朋友都应该看看这个开源项目，这个是一个韩国团队开源出来的，通过JavaAgent的机制来做字节码代码植入，实现加入traceid和抓取性能数据的目的。NewRelic、Oneapm之类的工具在java平台上的性能分析也是类似的机制。</p>
<p>*<em>2、SkyWalking *</em> github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">wu-sheng/sky-walking</a>这是国内一位叫吴晟的兄弟开源的，也是一个对JAVA分布式应用程序集群的业务运行情况进行追踪、告警和分析的系统，在github上也有400多颗星了。功能相对pinpoint还是稍弱一些，插件还没那么丰富，不过也很难得了。</p>
<p><strong>3、Zipkin</strong>官网：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">OpenZipkin · A distributed tracing system</a>github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">GitHub - openzipkin/zipkin: Zipkin is a distributed tracing system</a>这个是twitter开源出来的，也是参考Dapper的体系来做的。</p>
<p>Zipkin的java应用端是通过一个叫Brave的组件来实现对应用内部的性能分析数据采集。Brave的github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">github.com/openzipkin/…</a>这个组件通过实现一系列的java拦截器，来做到对http/servlet请求、数据库访问的调用过程跟踪。然后通过在spring之类的配置文件里加入这些拦截器，完成对java应用的性能数据采集。</p>
<p><strong>4、CAT</strong>  github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">GitHub - dianping/cat: Central Application Tracking</a>这个是大众点评开源出来的，实现的功能也还是蛮丰富的，国内也有一些公司在用了。不过他实现跟踪的手段，是要在代码里硬编码写一些“埋点”，也就是侵入式的。这样做有利有弊，好处是可以在自己需要的地方加埋点，比较有针对性；坏处是必须改动现有系统，很多开发团队不愿意。</p>
<p><strong>5、Xhprof/Xhgui</strong>这两个工具的组合，是针对PHP应用提供APM能力的工具，也是非侵入式的。Xhprof github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">GitHub - preinheimer/xhprof: XHGUI is a GUI for the XHProf PHP extension, using a database backend, and pretty graphs to make it easy to use and interpret.</a>Xhgui github地址：<a href="https://blog.csdn.net/mbugatti/article/details/53405203" target="_blank" rel="noopener">GitHub - perftools/xhgui: A graphical interface for XHProf data built on MongoDB</a>我对PHP不熟，不过网上介绍这两个工具的资料还是蛮多的。</p>
<p><img src="/images/%E5%B8%82%E5%9C%BA%E5%B8%B8%E7%94%A8%E8%B0%83%E7%94%A8%E9%93%BE%E7%9B%91%E6%8E%A7.jpg" alt="alt"></p>
<h2 id="熔断、隔离、限流、降级"><a href="#熔断、隔离、限流、降级" class="headerlink" title="熔断、隔离、限流、降级"></a>熔断、隔离、限流、降级</h2><p>面对巨大的突发流量下，大型公司一般会采用一系列的熔断（系统自动将服务关闭防止让出现的问题最大化）、隔离（将服务和服务隔离，防止一个服务挂了其他服务不能访问）、限流（单位时间内之允许一定数量用户访问）、降级（当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，我们可以将一些不重要或不紧急的服务或任务进行服务的延迟使用或暂停使用）措施。</p>
<p>下面介绍一下 Hystrix 的运行流程：</p>
<p><img src="/images/hystrix%E7%9A%84%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg" alt="alt"></p>
<p>每一个微服务调用时，都会使用 Hystrix 的 Command 方式（上图的左上角那个），然后使用 Command 同步的，或者是响应式的，或者是异步的，判断电路是否熔断（顺着图从左往右看），如果断路则走降级 Fallback。</p>
<p>如果这个线闭合着，但是线程资源没了，队列满了，则走限流措施（看图的第 5 步）。</p>
<p>如果走完了，执行成功了，则走 run() 方法，获取 Response，但是这个过程如果出错了，则继续走降级 Fallback。</p>
<p>同时，看图最上面有一个后缀是 Health 的，这是一个计算整个链路是否健康的组件，每一步操作都被它记录着。</p>
<h2 id="容器与服务编排引擎"><a href="#容器与服务编排引擎" class="headerlink" title="容器与服务编排引擎"></a>容器与服务编排引擎</h2><p>从物理机到虚拟机，从虚拟机到容器；从物理集群到 OpenStack，OpenStack 到 Kubernetes；科技不断的变化，我们的认知也没刷新。</p>
<p>我们从容器开始说起，它首先是一个相对独立的运行环境，在这一点有点类似于虚拟机，但是不像虚拟机那样彻底。 </p>
<p>虚拟机会将虚拟硬件、内核（即操作系统）以及用户空间打包在新虚拟机当中，虚拟机能够利用“虚拟机管理程序”运行在物理设备之上。</p>
<p>虚拟机依赖于 Hypervisor，其通常被安装在“裸金属”系统硬件之上，这导致 Hypervisor 在某些方面被认为是一种操作系统。</p>
<p>一旦 Hypervisor 安装完成， 就可以从系统可用计算资源当中分配虚拟机实例了，每台虚拟机都能够获得唯一的操作系统和负载（应用程序）。</p>
<p>简言之，虚拟机先需要虚拟一个物理环境，然后构建一个完整的操作系统，再搭建一层 Runtime，然后供应用程序运行。</p>
<p>对于容器环境来说，不需要安装主机操作系统，直接将容器层（比如 LXC 或 Libcontainer）安装在主机操作系统（通常是 Linux 变种）之上。</p>
<p>在安装完容器层之后，就可以从系统可用计算资源当中分配容器实例了，并且企业应用可以被部署在容器当中。</p>
<p>但是，每个容器化应用都会共享相同的操作系统(单个主机操作系统)。容器可以看成一个装好了一组特定应用的虚拟机，它直接利用了宿主机的内核，抽象层比虚拟机更少，更加轻量化，启动速度极快。</p>
<p>相比于虚拟机，容器拥有更高的资源使用效率，因为它并不需要为每个应用分配单独的操作系统——实例规模更小、创建和迁移速度也更快。这意味着相比于虚拟机，单个操作系统能够承载更多的容器。</p>
<p>云提供商十分热衷于容器技术，因为在相同的硬件设备当中，可以部署数量更多的容器实例。</p>
<p>此外，容器易于迁移，但是只能被迁移到具有兼容操作系统内核的其他服务器当中，这样就会给迁移选择带来限制。</p>
<p>因为容器不像虚拟机那样同样对内核或者虚拟硬件进行打包，所以每套容器都拥有自己的隔离化用户空间，从而使得多套容器能够运行在同一主机系统之上。</p>
<p>我们可以看到全部操作系统层级的架构都可实现跨容器共享，惟一需要独立构建的就是二进制文件与库。</p>
<p>正因为如此，容器才拥有极为出色的轻量化特性。</p>
<p>我们最常用的容器是daocker，网址如下👉<a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></p>
<h3 id="容器编排"><a href="#容器编排" class="headerlink" title="容器编排"></a>容器编排</h3><p>过去虚拟机可以通过云平台<code>open stack</code>管理虚拟化，容器时代如何管理容器呢？这就要看看容器编排引擎了。</p>
<h4 id="①Apache-mesos"><a href="#①Apache-mesos" class="headerlink" title="①Apache mesos"></a>①Apache mesos</h4><p>mesos是基于master，slave架构，框架决定如何利用资源，master负责管理机器，slave会定期的将机器情况报告给master，master再将信息给框架。master是高可用的，因为zk，也有leader的存在。下面是架构图👇</p>
<p><img src="/images/ApacheMesos.jpg" alt="alt"></p>
<h4 id="②kubernetes"><a href="#②kubernetes" class="headerlink" title="②kubernetes"></a>②kubernetes</h4><p>kubernetes是最近十分火热的开源容器编排引擎，具体可以参考<a href="https://www.kubernetes.org.cn/kubernetes%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84" target="_blank" rel="noopener">kubernetes中文文档</a></p>
<p><img src="/images/kubernetes.jpg" alt="alt"></p>
<p>Kubernetes设计理念和功能其实就是一个类似Linux的分层架构，先说说每一个Kubernetes节点内部，kubelet管理全局全局pod，而每一个pod承载着一个或多个容器，kube-proxy负责网络代理和负载均衡    。</p>
<p>Kubernetes节点外部，则是对应的控制管理服务器，负责统一管理各个节点调度分配与运行。</p>
<h3 id="服务网格化"><a href="#服务网格化" class="headerlink" title="服务网格化"></a>服务网格化</h3><p>。。。待更新</p>
<h2 id="资料与文献"><a href="#资料与文献" class="headerlink" title="资料与文献"></a>资料与文献</h2><p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">马丁.福勒对微服务的描述</a></p>
<p><a href="https://yq.aliyun.com/articles/8611" target="_blank" rel="noopener">微服务架构的理论基础 - 康威定律</a></p>
<p><a href="https://www.jianshu.com/p/0fbbf99a236e" target="_blank" rel="noopener">调用链选型之Zipkin，Pinpoint，SkyWalking，CAT</a></p>
]]></content>
  </entry>
  <entry>
    <title>仓央嘉措诗集</title>
    <url>/2020/05/24/%E4%BB%93%E5%A4%AE%E5%98%89%E6%8E%AA%E8%AF%97%E9%9B%86/</url>
    <content><![CDATA[<p>1.住进布达拉宫，我是雪域最大的王。流浪在拉萨街头，我是世间最美的情郎。</p>
<p>2.一个人需要隐藏多少秘密，才能巧妙地度过一生，这佛光闪闪的高原，三步两步便是天堂，却仍有那么多人，因心事过重而走不动。</p>
<p>3.人生若只如初见，我是少年人，我有佛心也有凡心。向佛祖求参悟不了的惑，与有情人做快乐尽兴的事，不妄一场人生。</p>
<p>4.我愿为你颠倒红尘，这是你我的命运。有一日，当你登临高峰，面向大海，你会看到一个云游四方的行僧。你的眼中有他，他却在回眸之间将你印入了心底。他是你的。</p>
<p>5.最美是我的一生。每个人的一生，真实而美好。你所拥有即拥有，失去却不意味着失去。失去是另一种拥有，你要相信。你的失败与伟大，新生与寂灭，犹如花开花谢，简静自持，珍贵永远。</p>
<p>6.我在人世之前，心随人世而去。我记得佛的话语，却忘记相问的初衷。我在人海之中寻觅一个日月永不相见的起源，如同，我背弃凡尘之后又惦念追随。</p>
<p>7.我是天生的情痴，一日日不死心，心中的光明灭了，仍要去寻黑暗的火种，点燃永生。倘若永夜不变，我也要拉住一个人的手，与她共度。</p>
<p>8.此时，此地，于日光之城，于红日神山，于观世音的圣殿，我是罗桑仁钦·仓央嘉措。</p>
<p>9.缘起即灭，缘生已空，我的少年，失语多于失梦。我幽游深处探寻莲花的芬芳与清寂，意外寻到了最爱之人，她对我说：“你就是我的莲花。”</p>
<p>10.世间事，除了生死，哪一件事不是闲事。——仓央嘉措</p>
<p>11.我是佛前一朵莲花，我到人世来，被世人所误。我是凡尘最美的莲花，我不是普度众生的佛，我来寻我今生的情，与她谈一场风花雪月的爱。</p>
<p>12.第一最好不相见，免得彼此相爱恋；第二最好不熟知，免得彼此苦相思！——仓央嘉措</p>
]]></content>
  </entry>
  <entry>
    <title>一个老程序员的忠告：不要一辈子靠技术生存</title>
    <url>/2020/09/07/%E4%B8%80%E4%B8%AA%E8%80%81%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%BF%A0%E5%91%8A%EF%BC%9A%E4%B8%8D%E8%A6%81%E4%B8%80%E8%BE%88%E5%AD%90%E9%9D%A0%E6%8A%80%E6%9C%AF%E7%94%9F%E5%AD%98/</url>
    <content><![CDATA[<p><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/1hReHaqafaexqh42v2icRsgclq0biaVictCI6XFXQ7O2Dlpj01n6Byycdjscs83tnicED9ys9uJ6Xqtcsm8lngGn4Q/640?wx_fmt=jpeg" alt="640?wx_fmt=jpeg"></p>
<p>图丨《Ready Player One》</p>
<p>文丨源：世界经理人<br>我现在是自己做，但我此前有多年在从事软件开发工作，当回过头来想一想自己，觉得特别想对那些初学JAVA/DOT。NET技术的朋友说点心里话，希望你们能从我们的体会中，多少受点启发(也许我说的不好，你不赞同但看在我真心的份上别扔砖头啊)。</p>
<p>一、在中国你千万不要因为学习技术就可以换来稳定的生活和高的薪水待遇，你更千万不要认为那些从事市场开发，跑腿的人，没有前途。</p>
<p>不知道你是不是知道，咱们中国有相当大的一部分软件公司，他们的软件开发团队都小的可怜，甚至只有1-3个人，连一个项目小组都算不上，而这样的团队却要承担一个软件公司所有的软件开发任务，在软件上线和开发的关键阶段需要团队的成员没日没夜的加班，还需要为测试出的BUG和不能按时提交的软件模块功能而心怀忐忑，有的时候如果你不幸加入现场开发的团队你则需要背井离乡告别你的女友，进行封闭开发，你平时除了编码之外就是吃饭和睡觉（有钱的公司甚至请个保姆为你做饭，以让你节省出更多的时间来投入到工作中，让你一直在那种累了就休息，不累就立即工作的状态）<br>更可怕的是，会让你接触的人际关系非常单一，除了有限的技术人员之外你几乎见不到做其他行业工作和职位的人，你的朋友圈子小且单一，甚至破坏你原有的爱情（想象一下，你在外地做现场开发2个月以上，却从没跟女友见过一面的话，你的女友是不是会对你呲牙裂嘴）。<br>也许你拿到了所谓的白领的工资，但你却从此失去享受生活的自由，如果你想做技术人员尤其是开发人员，我想你很快就会理解，你多么想在一个地方长期待一段时间，认识一些朋友，多一些生活时间的愿望。<br>比之于我们的生活和人际关系及工作，那些从事售前和市场开发的朋友，却有比我们多的多的工作之外的时间，甚至他们工作的时间有的时候是和生活的时间是可以兼顾的，他们可以通过市场开发，认识各个行业的人士，可以认识各种各样的朋友，他们比我们坦率说更有发财和发展的机会，只要他们跟我们一样勤奋。（有一种勤奋的普通人，如果给他换个地方，他马上会成为一个勤奋且出众的人。）</p>
<p>二、在学习技术的时候千万不要认为如果做到技术最强，就可以成为100%受尊重的人。</p>
<p><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/1hReHaqafaexqh42v2icRsgclq0biaVictCKg6kZwAeVGiaZjaPAESVSwFJCtNahfw50XJwFxXW6yZ5d9nZkpyAicpw/640?wx_fmt=jpeg" alt="640?wx_fmt=jpeg"></p>
<p>图丨《Ready Player One》</p>
<p>有一次一个人在面试项目经理的时候说了这么一段话：我只用最听话的人，按照我的要求做只要是听话就要，如果不听话不管他技术再好也不要。随后这个人得到了试用机会，如果没意外的话，他一定会是下一个项目经理的继任者。<br>朋友们你知道吗？不管你技术有多强，你也不可能自由的腾出时间象别人那样研究一下LINUX源码，甚至写一个LINUX样的杰作来表现你的才能。你需要做的就是按照要求写代码，写代码的含义就是都规定好，你按照规定写，你很快就会发现你昨天写的代码，跟今天写的代码有很多类似，等你写过一段时间的代码，你将领略：复制，拷贝，粘贴那样的技术对你来说是何等重要。（如果你没有做过1年以上的真正意义上的开发不要反驳我）。<br>如果你幸运的能够听到市场人员的谈话，或是领导们的谈话，你会隐约觉得他们都在把技术人员当作编码的机器来看，你的价值并没有你想象的那么重要。而在你所在的团队内部，你可能正在为一个技术问题的讨论在跟同事搞内耗，因为他不服你，你也不服他，你们都认为自己的对，其实你们两个都对，而争论的目的就是为了在关键场合证明一下自己比对方技术好，比对方强。（在一个项目开发中，没有人愿意长期听别人的，总想换个位置领导别人。）</p>
<p>三、你更不要认为，如果我技术够好，我就自己创业，自己有创业的资本，因为自己是搞技术的。</p>
<p><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/1hReHaqafaexqh42v2icRsgclq0biaVictCUqP4V6VHCvjv9FczNbr9Wkg5bKiaUWz1icQAnYjKvjcyK59JQbvfNImQ/640?wx_fmt=jpeg" alt="640?wx_fmt=jpeg"></p>
<p>图丨《Ready Player One》</p>
<p>如果你那样认为，真的是大错特错了，你可以做个调查在非技术人群中，没有几个人知道C#与JAVA的，更谈不上来欣赏你的技术是好还是不好。一句话，技术仅仅是一个工具，善于运用这个工具为别人干活的人，却往往不太擅长用这个工具来为自己创业，因为这是两个概念，训练的技能也是完全不同的。<br>创业最开始的时候，你的人际关系，你处理人际关系的能力，你对社会潜规则的认识，还有你明白不明白别人的心，你会不会说让人喜欢的话，还有你对自己所提供的服务的策划和推销等等，也许有一万，一百万个值得我们重视的问题，但你会发现技术却很少有可能包含在这一万或一百万之内，如果你创业到了一个快成功的阶段，你会这样告诉自己：我干吗要亲自做技术，我聘一个人不就行了，这时候你才真正会理解技术的作用，和你以前做技术人员的作用。</p>
<p>小结</p>
<p>基于上面的讨论，我奉劝那些学习技术的朋友，千万不要拿科举考试样的心态去学习技术,对技术的学习几近的痴迷，想掌握所有所有的技术，以让自己成为技术领域的权威和专家，以在必要的时候或是心里不畅快的时候到网上对着菜鸟说自己是前辈。<br>技术仅仅是一个工具，是你在人生一个阶段生存的工具，你可以一辈子喜欢他，但最好不要一辈子靠它生存。<br>掌握技术的唯一目的就是拿它找工作（如果你不想把技术当作你第二生命的话），就是干活。所以你在学习的时候千万不要去做那些所谓的技术习题或是研究那些冒泡算法，最大数算法了，什么叫干活？<br>就是做一个东西让别人用，别人用了，可以提高他们的工作效率，想象吧，你做1万道技术习题有什么用？只会让人觉得酸腐，还是在学习的时候，多培养些自己务实的态度吧，比如研究一下当地市场目前有哪些软件公司用人，自己离他们的要求到底有多远，自己具体应该怎么做才可以达到他们的要求。等你分析完这些，你就会发现，找工作成功，技术的贡献率其实并没有你原来想象的那么高。</p>
<p>不管你是学习技术为了找工作还是创业，你都要对技术本身有个清醒的认识，在中国不会出现BILL GATES，因为，中国目前还不是十分的尊重技术人才，还仅仅的停留在把软件技术人才当作人才机器来用的尴尬境地。（如果你不理解，一种可能是你目前仅仅从事过技术工作，你的朋友圈子里技术类的朋友占了大多数，一种可能是你还没有工作，但喜欢读比尔·盖茨的传记）。</p>
<p>-THE END-</p>
]]></content>
  </entry>
</search>
